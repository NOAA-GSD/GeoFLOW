This is the 'user' directory, for adding new state and forcing initialization
methods. 

There are two main steps for adding a new initialization routine. There are 2
initializations that may be done: (A) state initialization (always required);
(B) forcing initialization (only required if 'use_forcing' == TRUE in configuration
file.

For example, to add a new state initialization, first

> cd src/cdg/user/state

There are 2 main steps to add the new initialization method: (1) implementation,
(2) configuration or 'wiring' as described here:

(1)(a)  Use the namespace template below (or one of the existing files), 
    and replace XXX with a new function name; fill out the function, and save it
    as 'ginits_XXX.ipp' (the 'XXX' on the filename is arbitrary, but should
    relate the the XXX in the function name. Then, open 'ginits.hpp', and add
    the new .ipp name to the include list at the bottom:
       
      ...
    #include "finits_XXX.ipp"
      ...

   (b)  Open up the file 'ginits.hpp', and add the new function name, to the list
    of available initialization functions:

      ...
    GBOOL impl_XXX (const PropertyTree& stree, GGrid &grid,  Time &time, State &ub, State &u);

      ...
      

   -----------------------------begin .ipp template contents: 
 
    #include "ginits.hpp"

    namespace ginits {

      GBOOL impl_XXX(const PropertyTree &stree, const Time &t, State &u, State &ub)
      {

        return TRUE; // or FALSE

      } // end, new function name

    }  // end, namespace ginits

   -----------------------------end .ipp template contents: 



(2) Open '../init/ginits_factory.ipp' and 'wire' the new initialization
    method in to the JSON property tree input, by following the existing
    pattern. The name in the conditionals to the left of ' ...  == sinit'
    is the name that will appear in the JSON configuration file.

To add a new forcing initialization, you would first

> cd force

then follow the same procedure as above, substituting 'ginitf' for 'ginits'
(the f is for 'forcing'; the s, for 'state').
